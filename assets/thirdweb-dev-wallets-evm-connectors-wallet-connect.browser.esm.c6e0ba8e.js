import{H as P,v as o,I as E,f as l,K as g,U as C,O as _,l as v,_ as S}from"./index.28a4df2f.js";import{g as N}from"./url-a45219bd.browser.esm.9418c8a0.js";const A=new Set([1,137,10,42161,56]),f="eip155",w="wagmi.requestedChains",u="wallet_addEthereumChain",m="last-used-chain-id";class U extends P{constructor(e){super({...e,options:{isNewChainsStale:!0,...e.options}}),o(this,"id",E.walletConnect),o(this,"name","WalletConnect"),o(this,"ready",!0),o(this,"onAccountsChanged",t=>{t.length===0?this.emit("disconnect"):t[0]&&this.emit("change",{account:l(t[0])})}),o(this,"onChainChanged",async t=>{const i=Number(t),s=this.isChainUnsupported(i);await this._storage.setItem(m,String(t)),this.emit("change",{chain:{id:i,unsupported:s}})}),o(this,"onDisconnect",async()=>{await this._setRequestedChainsIds([]),await this._storage.removeItem(m),this.emit("disconnect")}),o(this,"onDisplayUri",t=>{this.emit("message",{type:"display_uri",data:t})}),o(this,"onConnect",()=>{this.emit("connect",{provider:this._provider})}),this._storage=e.options.storage,this._createProvider(),this.filteredChains=this.chains.length>50?this.chains.filter(t=>A.has(t.chainId)):this.chains,this.showWalletConnectModal=this.options.qrcode!==!1}async connect(){var i;let{chainId:e,pairingTopic:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{let s=e;if(!s){const d=await this._storage.getItem(m),r=d?parseInt(d):void 0;r&&!this.isChainUnsupported(r)?s=r:s=(i=this.filteredChains[0])==null?void 0:i.chainId}if(!s)throw new Error("No chains found on connector.");const n=await this.getProvider();this.setupListeners();const a=await this._isChainsStale();if(n.session&&a&&await n.disconnect(),!n.session||a){const d=this.filteredChains.filter(r=>r.chainId!==s).map(r=>r.chainId);this.emit("message",{type:"connecting"}),await n.connect({pairingTopic:t,chains:[s],optionalChains:d.length>0?d:[s]}),await this._setRequestedChainsIds(this.filteredChains.map(r=>{let{chainId:y}=r;return y}))}const h=await n.enable();if(!h[0])throw new Error("No accounts found on provider.");const p=l(h[0]),c=await this.getChainId(),I=this.isChainUnsupported(c);return{account:p,chain:{id:c,unsupported:I},provider:new g(n)}}catch(s){throw/user rejected/i.test(s==null?void 0:s.message)?new C(s):s}}async disconnect(){const e=()=>{if(!(typeof localStorage>"u"))for(const s in localStorage)s.startsWith("wc@2")&&localStorage.removeItem(s)};e();const t=await this.getProvider();(async()=>{try{await t.disconnect()}catch(s){if(!/No matching key/i.test(s.message))throw s}finally{this._removeListeners(),await this._setRequestedChainsIds([]),e()}})()}async getAccount(){const{accounts:e}=await this.getProvider();if(!e[0])throw new Error("No accounts found on provider.");return l(e[0])}async getChainId(){const{chainId:e}=await this.getProvider();return e}async getProvider(){let{chainId:e}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};if(this._provider||await this._createProvider(),e&&await this.switchChain(e),!this._provider)throw new Error("No provider found.");return this._provider}async getSigner(){let{chainId:e}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const[t,i]=await Promise.all([this.getProvider({chainId:e}),this.getAccount()]);return new g(t,e).getSigner(i)}async isAuthorized(){try{const[e,t]=await Promise.all([this.getAccount(),this.getProvider()]),i=await this._isChainsStale();if(!e)return!1;if(i&&t.session){try{await t.disconnect()}catch{}return!1}return!0}catch{return!1}}async switchChain(e){const t=this.chains.find(i=>i.chainId===e);if(!t)throw new _(`Chain with ID: ${e}, not found on connector.`);try{const i=await this.getProvider(),s=this._getNamespaceChainsIds(),n=this._getNamespaceMethods();if(!s.includes(e)&&n.includes(u)){const h=t.explorers&&t.explorers[0],p=h?{blockExplorerUrls:[h.url]}:{};await i.request({method:u,params:[{chainId:v(t.chainId),chainName:t.name,nativeCurrency:t.nativeCurrency,rpcUrls:N(t),...p}]});const c=await this._getRequestedChainsIds();c.push(e),await this._setRequestedChainsIds(c)}return await i.request({method:"wallet_switchEthereumChain",params:[{chainId:v(e)}]}),t}catch(i){const s=typeof i=="string"?i:i==null?void 0:i.message;throw/user rejected request/i.test(s)?new C(i):new _(i)}}async _createProvider(){return this._initProviderPromise||(this._initProviderPromise=this.initProvider()),this._initProviderPromise}async initProvider(){const{default:e,OPTIONAL_EVENTS:t,OPTIONAL_METHODS:i}=await S(()=>import("./index.es.f1c68e57.js"),["assets/index.es.f1c68e57.js","assets/index.28a4df2f.js","assets/index.5a70ddf1.css"]),[s,...n]=this.filteredChains.map(a=>{let{chainId:h}=a;return h});s&&(this._provider=await e.init({showQrModal:this.showWalletConnectModal,projectId:this.options.projectId,optionalMethods:i,optionalEvents:t,chains:[s],optionalChains:n,metadata:{name:this.options.dappMetadata.name,description:this.options.dappMetadata.description||"",url:this.options.dappMetadata.url,icons:[this.options.dappMetadata.logoUrl||""]},rpcMap:Object.fromEntries(this.filteredChains.map(a=>[a.chainId,a.rpc[0]||""])),qrModalOptions:this.options.qrModalOptions}))}async _isChainsStale(){if(this._getNamespaceMethods().includes(u)||!this.options.isNewChainsStale)return!1;const t=await this._getRequestedChainsIds(),i=this.filteredChains.map(n=>{let{chainId:a}=n;return a}),s=this._getNamespaceChainsIds();return s.length&&!s.some(n=>i.includes(n))?!1:!i.every(n=>t.includes(n))}async setupListeners(){!this._provider||(this._removeListeners(),this._provider.on("accountsChanged",this.onAccountsChanged),this._provider.on("chainChanged",this.onChainChanged),this._provider.on("disconnect",this.onDisconnect),this._provider.on("session_delete",this.onDisconnect),this._provider.on("display_uri",this.onDisplayUri),this._provider.on("connect",this.onConnect))}_removeListeners(){!this._provider||(this._provider.removeListener("accountsChanged",this.onAccountsChanged),this._provider.removeListener("chainChanged",this.onChainChanged),this._provider.removeListener("disconnect",this.onDisconnect),this._provider.removeListener("session_delete",this.onDisconnect),this._provider.removeListener("display_uri",this.onDisplayUri),this._provider.removeListener("connect",this.onConnect))}async _setRequestedChainsIds(e){await this._storage.setItem(w,JSON.stringify(e))}async _getRequestedChainsIds(){const e=await this._storage.getItem(w);return e?JSON.parse(e):[]}_getNamespaceChainsIds(){var t,i,s;if(!this._provider)return[];const e=(s=(i=(t=this._provider.session)==null?void 0:t.namespaces[f])==null?void 0:i.chains)==null?void 0:s.map(n=>parseInt(n.split(":")[1]||""));return e!=null?e:[]}_getNamespaceMethods(){var t,i;if(!this._provider)return[];const e=(i=(t=this._provider.session)==null?void 0:t.namespaces[f])==null?void 0:i.methods;return e!=null?e:[]}}export{U as WalletConnectConnector};
