import{H as l,v as a,I as g,f as c,G as d,K as u,U as h,_ as p,l as w,M as m,N as C,O as f}from"./index.28a4df2f.js";import{g as v}from"./url-a45219bd.browser.esm.9418c8a0.js";class E extends l{constructor(t){let{chains:e,options:r}=t;super({chains:e,options:{reloadOnDisconnect:!1,...r}}),a(this,"id",g.coinbase),a(this,"name","Coinbase Wallet"),a(this,"ready",!0),a(this,"onAccountsChanged",i=>{i.length===0?this.emit("disconnect"):this.emit("change",{account:c(i[0])})}),a(this,"onChainChanged",i=>{const n=d(i),s=this.isChainUnsupported(n);this.emit("change",{chain:{id:n,unsupported:s}})}),a(this,"onDisconnect",()=>{this.emit("disconnect")})}async connect(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const e=await this.getProvider();this.setupListeners(),this.emit("message",{type:"connecting"});const r=await e.enable(),i=c(r[0]);let n=await this.getChainId(),s=this.isChainUnsupported(n);if(t&&n!==t)try{n=(await this.switchChain(t)).chainId,s=this.isChainUnsupported(n)}catch(o){console.error(`Connected but failed to switch to desired chain ${t}`,o)}return{account:i,chain:{id:n,unsupported:s},provider:new u(e)}}catch(e){throw/(user closed modal|accounts received is empty)/i.test(e.message)?new h(e):e}}async disconnect(){if(!this._provider)return;const t=await this.getProvider();t.removeListener("accountsChanged",this.onAccountsChanged),t.removeListener("chainChanged",this.onChainChanged),t.removeListener("disconnect",this.onDisconnect),t.disconnect(),t.close()}async getAccount(){const e=await(await this.getProvider()).request({method:"eth_accounts"});if(e.length===0)throw new Error("No accounts found");return c(e[0])}async getChainId(){const t=await this.getProvider();return d(t.chainId)}async getProvider(){var t;if(!this._provider){let e=(await p(()=>import("./index.d738a8ad.js").then(o=>o.i),["assets/index.d738a8ad.js","assets/index.28a4df2f.js","assets/index.5a70ddf1.css","assets/js.804fd42a.js"])).default;typeof e!="function"&&typeof e.default=="function"&&(e=e.default),this._client=new e(this.options);const r=(t=this._client.walletExtension)==null?void 0:t.getChainId(),i=this.chains.find(o=>this.options.chainId?o.chainId===this.options.chainId:o.chainId===r)||this.chains[0],n=this.options.chainId||(i==null?void 0:i.chainId),s=this.options.jsonRpcUrl||(i==null?void 0:i.rpc[0]);this._provider=this._client.makeWeb3Provider(s,n)}return this._provider}async getSigner(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const[e,r]=await Promise.all([this.getProvider(),this.getAccount()]);return new u(e,t).getSigner(r)}async isAuthorized(){try{return!!await this.getAccount()}catch{return!1}}async switchChain(t){var i;const e=await this.getProvider(),r=w(t);try{return await e.request({method:"wallet_switchEthereumChain",params:[{chainId:r}]}),(i=this.chains.find(n=>n.chainId===t))!=null?i:{chainId:t,name:`Chain ${r}`,slug:`${r}`,nativeCurrency:{name:"Ether",decimals:18,symbol:"ETH"},rpc:[""],testnet:!1,chain:"ethereum",shortName:"eth"}}catch(n){const s=this.chains.find(o=>o.chainId===t);if(!s)throw new m({chainId:t,connectorId:this.id});if(n.code===4902)try{return await e.request({method:"wallet_addEthereumChain",params:[{chainId:r,chainName:s.name,nativeCurrency:s.nativeCurrency,rpcUrls:v(s),blockExplorerUrls:this.getBlockExplorerUrls(s)}]}),s}catch(o){throw this._isUserRejectedRequestError(o)?new h(o):new C}throw this._isUserRejectedRequestError(n)?new h(n):new f(n)}}_isUserRejectedRequestError(t){return/(user rejected)/i.test(t.message)}async setupListeners(){const t=await this.getProvider();t.on("accountsChanged",this.onAccountsChanged),t.on("chainChanged",this.onChainChanged),t.on("disconnect",this.onDisconnect)}async getQrUrl(){if(await this.getProvider(),!this._client)throw new Error("Coinbase Wallet SDK not initialized");return this._client.getQrUrl()}}export{E as CoinbaseWalletConnector};
